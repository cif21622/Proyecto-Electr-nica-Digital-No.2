//Lectura de Sensor de acelerometro y giroscopio
//César André CIfuentes Guzmán 
//21622

//Se incluyen las librerías para realizar la medición con el sensor 
#include <Arduino.h>
#include "HX711.h"
#include <Wire.h>
#include <Adafruit_NeoPixel.h>
// Se definen los cavalores para almacenar los valores de la aceleración  según el sensor de giroscopio. 

float RateRoll, RatePitch, RateYaw;
float AccX, AccY, AccZ;
float AngleRoll, AnglePitch;
float AngleZ;
float LoopTimer;

//Se definen cadenas para enviar el valor de string a la Tiva C
String StAngleRoll; 
String StAnglePitch;

//Configuración de Neopixel
#define PIN 15  // Pin de datos conectado a tira Neopixel
#define NUMPIXELS 16  // Número de LEDs en tira Neopixel

//Se establece la configuración del neopixel
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

//Se definen los paramertros de funciones utilizadas en el programa

//Función para mostrar en la tira de luces una secuencia de luz, dando apariencia de que está cargando el proceso.
//Funciona en dos estado, cuando se está midiendo y cuando está guardando el valor en la memoria SD
void colorWipe(byte red, byte green, byte blue, int SpeedDelay);

//Función para mostrar en la tira solo un color, se usa esta función para indicar que el programa está funcionando
void colorSolid(byte red, byte green, byte blue, int SpeedDelay);

// Funcion utilizada para la toma de datos del aceletomtro 
void gyro_signals(void) {
  //En esta sección, se están configurando los registros del sensor de aceleración. Los valores 0x1A, 0x1C y 0x3B son direcciones de registro específicas para configurar el sensor MPU6050. 
  //Los valores 0x05, 0x10 y 0x08 son datos que se están escribiendo en esos registros respectivos.
  //Luego, se solicitan 6 bytes de datos desde la dirección 0x68 (dirección del sensor) y se combinan dos bytes consecutivos para formar números de 16 bits (AccXLSB, AccYLSB, AccZLSB).
  Wire.beginTransmission(0x68);
  Wire.write(0x1A);
  Wire.write(0x05);
  Wire.endTransmission();
  Wire.beginTransmission(0x68);
  Wire.write(0x1C);
  Wire.write(0x10);
  Wire.endTransmission();
  Wire.beginTransmission(0x68);
  Wire.write(0x3B);
  Wire.endTransmission(); 
  Wire.requestFrom(0x68,6);
  int16_t AccXLSB = Wire.read() << 8 | Wire.read();
  int16_t AccYLSB = Wire.read() << 8 | Wire.read();
  int16_t AccZLSB = Wire.read() << 8 | Wire.read();
  //se configuran los registros específicos del giroscopio (0x1B y 0x43), y luego se solicitan 6 bytes de datos para obtener las lecturas del giroscopio en GyroX, GyroY y GyroZ.
  Wire.beginTransmission(0x68);
  Wire.write(0x1B); 
  Wire.write(0x8);
  Wire.endTransmission();                                                   
  Wire.beginTransmission(0x68);
  Wire.write(0x43);
  Wire.endTransmission();
  Wire.requestFrom(0x68,6);
  int16_t GyroX=Wire.read()<<8 | Wire.read();
  int16_t GyroY=Wire.read()<<8 | Wire.read();
  int16_t GyroZ=Wire.read()<<8 | Wire.read();
  RateRoll=(float)GyroX/65.5;
  RatePitch=(float)GyroY/65.5;
  RateYaw=(float)GyroZ/65.5;
  //Se hace la converción de la aceleración, para obtener la aceleración en terminos de gravedad, en esta parte del código tambíen se agrega un offset, para que el sensor se envuentre ccalibrado. 
  AccX=((float)AccXLSB/4096)-0.06;
  AccY=((float)AccYLSB/4096)+0.02;
  AccZ=((float)AccZLSB/4096)+0.05;

  //Angle Roll Porgrama, se encuentran los valores de los ángulos por medio de trigonometría
  AngleRoll=atan(AccY/sqrt(AccX*AccX+AccZ*AccZ))*1/(3.142/180);
  AnglePitch=-atan(AccX/sqrt(AccY*AccY+AccZ*AccZ))*1/(3.142/180);
  AngleZ=-atan(sqrt(AccY*AccY+AccX*AccX)/AccZ)*1/(3.142/180);



}
void setup() {

  Serial.begin(115200);
  Serial2.begin(115200);
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH);
  Wire.setClock(400000);
  Wire.begin();
  delay(250);
  Wire.beginTransmission(0x68); 
  Wire.write(0x6B);
  Wire.write(0x00);
  Wire.endTransmission();
  pixels.begin();
  pixels.show(); // Inicializa todos los píxeles a 'apagado'
}
void loop() {
  //Si se recive un valor de la tiva C, se procede a su lectura y se envia el valor de la temperatura o en el neopixel se muestra que se está cargando
  if(Serial2.available()>0){
  //Lectura del comando recibido
  char comando = Serial2.read();
  //Verificación de si el comando es para imprimir la temperatura
  if(comando == '+'){
  Serial.println(comando);
  //Se hace la lectrua del sensor con la función 
  gyro_signals();
  Serial.print("Acceleration X [g]= ");
  Serial.print(AccX);
  Serial.print(" Acceleration Y [g]= ");
  Serial.print(AccY);
  Serial.print(" Acceleration Z [g]= ");
  Serial.println(AccZ);

  Serial.print("Angle Roll: ");
  Serial.print(AngleRoll);
  Serial.print(" degrees, Angle Pitch: ");
  Serial.print(AnglePitch);
  //Serial.print(" degrees, Angle Z: ");
  //Serial.print(AngleZ);
  //Serial.println(" degrees");  
   //Envío del valor medido del sensor a través del puerto serial 2
  StAngleRoll = String(AngleRoll); 
  StAnglePitch = String(AnglePitch); 
  Serial2.print("Roll: ");
  Serial2.print(StAngleRoll);
  Serial2.println(" Grados");
  Serial2.print("Pitch: ");
  Serial2.print(StAnglePitch);
  Serial2.println(" Grados");
  Serial.print("Dato enviado");
  for(int i=0; i<8; i++){
  colorWipe(0, 0, 255, 50); // Se muestra en el aro de luz una secuencia de luz para mostrar que se está midiendo la temperatura 
}
  
} //Verificación de comando que indica que se está guardando la temperatura 
  if(comando == '-'){
  Serial.print("Guardado en SD");
  //Se muestra en el aro de luz (Neopixel) una secuencia de luz para mostrar que se está guardando el valor en la memoria SD
  for(int i=0; i<8; i++){
  colorWipe(0, 255, 0, 50); // VERDE
}
}
  }
  //Se muestra en el neopixel un color rojo sólido, el cual demuestra que no se está realizando ningún proceso
  colorSolid(255, 0, 0, 50); 
  delay(10);


}


// Función para llenar el anillo de NeoPixel con un color sólido y efecto de carga
void colorWipe(byte red, byte green, byte blue, int SpeedDelay) {
  int pos = 0; // Variable para rastrear la posición de carga
  //Ciclo para ir encencidendo y apagando los pixeles, para dar efecto como que si se está cargando 
  for (int i = 0; i < pixels.numPixels(); i++) {
    pixels.setPixelColor(pos, pixels.Color(red, green, blue)); // Enciende el pixel actual
    pixels.show();
    delay(SpeedDelay);

    // Apaga el pixel anterior
    pixels.setPixelColor(pos, pixels.Color(0, 0, 0));
    
    // Avanza la posición de carga al siguiente pixel
    pos = (pos + 1) % pixels.numPixels();
  }
}

// Función para llenar el anillo de NeoPixel con un color sólido
void colorSolid(byte red, byte green, byte blue, int SpeedDelay) {
  //Ciclo en el que se encienden todos los pixeles del Neopixel de un color para mostrar que siempre está encendido 
  for (int i = 0; i < pixels.numPixels(); i++) {
    pixels.setPixelColor(i, pixels.Color(red, green, blue));
  }
  pixels.show();
  delay(SpeedDelay);
}

