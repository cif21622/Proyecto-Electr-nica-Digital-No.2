//Lectura de balanza 
//César André CIfuentes Guzmán 
//21622

//Se incluyen las librerías para realizar la medición con el sensor 
#include <Arduino.h>
#include "HX711.h"
#include <Wire.h>
#include <Adafruit_NeoPixel.h>
float RateRoll, RatePitch, RateYaw;
float AccX, AccY, AccZ;
float AngleRoll, AnglePitch;
float AngleZ;
float LoopTimer;
String StAngleRoll; 
String StAnglePitch;

//Configuración de Neopixel
#define PIN 15  // Pin de datos conectado a tu tira Neopixel
#define NUMPIXELS 24  // Número de LEDs en tu tira Neopixel
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
void colorWipe(byte red, byte green, byte blue, int SpeedDelay);
void colorSolid(byte red, byte green, byte blue, int SpeedDelay);


void gyro_signals(void) {
  Wire.beginTransmission(0x68);
  Wire.write(0x1A);
  Wire.write(0x05);
  Wire.endTransmission();
  Wire.beginTransmission(0x68);
  Wire.write(0x1C);
  Wire.write(0x10);
  Wire.endTransmission();
  Wire.beginTransmission(0x68);
  Wire.write(0x3B);
  Wire.endTransmission(); 
  Wire.requestFrom(0x68,6);
  int16_t AccXLSB = Wire.read() << 8 | Wire.read();
  int16_t AccYLSB = Wire.read() << 8 | Wire.read();
  int16_t AccZLSB = Wire.read() << 8 | Wire.read();
  Wire.beginTransmission(0x68);
  Wire.write(0x1B); 
  Wire.write(0x8);
  Wire.endTransmission();                                                   
  Wire.beginTransmission(0x68);
  Wire.write(0x43);
  Wire.endTransmission();
  Wire.requestFrom(0x68,6);
  int16_t GyroX=Wire.read()<<8 | Wire.read();
  int16_t GyroY=Wire.read()<<8 | Wire.read();
  int16_t GyroZ=Wire.read()<<8 | Wire.read();
  RateRoll=(float)GyroX/65.5;
  RatePitch=(float)GyroY/65.5;
  RateYaw=(float)GyroZ/65.5;
  AccX=((float)AccXLSB/4096)-0.06;
  AccY=((float)AccYLSB/4096)+0.02;
  AccZ=((float)AccZLSB/4096)+0.05;

  //Angle Roll Porgrama 
  AngleRoll=atan(AccY/sqrt(AccX*AccX+AccZ*AccZ))*1/(3.142/180);
  AnglePitch=-atan(AccX/sqrt(AccY*AccY+AccZ*AccZ))*1/(3.142/180);
  AngleZ=-atan(sqrt(AccY*AccY+AccX*AccX)/AccZ)*1/(3.142/180);



}
void setup() {

  Serial.begin(115200);
  Serial2.begin(115200);
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH);
  Wire.setClock(400000);
  Wire.begin();
  delay(250);
  Wire.beginTransmission(0x68); 
  Wire.write(0x6B);
  Wire.write(0x00);
  Wire.endTransmission();
  pixels.begin();
  pixels.show(); // Inicializa todos los píxeles a 'apagado'
}
void loop() {

  if(Serial2.available()>0){
  //Lectura del comando recibido
  char comando = Serial2.read();
  //Verificación de si el comando es para imprimir el peso
  if(comando == '+'){
  Serial.println(comando);
  gyro_signals();
  Serial.print("Acceleration X [g]= ");
  Serial.print(AccX);
  Serial.print(" Acceleration Y [g]= ");
  Serial.print(AccY);
  Serial.print(" Acceleration Z [g]= ");
  Serial.println(AccZ);

  Serial.print("Angle Roll: ");
  Serial.print(AngleRoll);
  Serial.print(" degrees, Angle Pitch: ");
  Serial.print(AnglePitch);
  //Serial.print(" degrees, Angle Z: ");
  //Serial.print(AngleZ);
  //Serial.println(" degrees");  
   //Envío del valor medido del sensor a través del puerto serial 2
  StAngleRoll = String(AngleRoll); 
  StAnglePitch = String(AnglePitch); 
  Serial2.print("Roll: ");
  Serial2.print(StAngleRoll);
  Serial2.println(" Grados");
  Serial2.print("Pitch: ");
  Serial2.print(StAnglePitch);
  Serial2.println(" Grados");
  Serial.print("Dato enviado");
  for(int i=0; i<8; i++){
  colorWipe(0, 0, 255, 50); // Azul
}
  
}
  if(comando == '-'){
  Serial.print("Guardado en SD");
  for(int i=0; i<8; i++){
  colorWipe(0, 255, 0, 50); // VERDE
}
}
  }
  colorSolid(255, 0, 0, 50); 
  delay(10);


}


// Función para llenar el anillo de NeoPixel con un color sólido y efecto de carga
void colorWipe(byte red, byte green, byte blue, int SpeedDelay) {
  int pos = 0; // Variable para rastrear la posición de carga

  for (int i = 0; i < pixels.numPixels(); i++) {
    pixels.setPixelColor(pos, pixels.Color(red, green, blue)); // Enciende el pixel actual
    pixels.show();
    delay(SpeedDelay);

    // Apaga el pixel anterior
    pixels.setPixelColor(pos, pixels.Color(0, 0, 0));
    
    // Avanza la posición de carga al siguiente pixel
    pos = (pos + 1) % pixels.numPixels();
  }
}

// Función para llenar el anillo de NeoPixel con un color sólido
void colorSolid(byte red, byte green, byte blue, int SpeedDelay) {
  for (int i = 0; i < pixels.numPixels(); i++) {
    pixels.setPixelColor(i, pixels.Color(red, green, blue));
  }
  pixels.show();
  delay(SpeedDelay);
}
