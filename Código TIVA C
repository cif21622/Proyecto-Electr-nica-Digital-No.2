//***************************************************************************************************************************************
/* Librería para el uso de la pantalla ILI9341 en modo 8 bits
 * Basado en el código de martinayotte - https://www.stm32duino.com/viewtopic.php?t=637
 * Adaptación, migración y creación de nuevas funciones: Pablo Mazariegos y José Morales
 * Con ayuda de: José Guerra
 * IE3027: Electrónica Digital 2 - 2019
 */
//***************************************************************************************************************************************
//Proyecto No.2 
//César CIfuentes 
//21622
//Código de la Tiva C 
//Código T
//Se incluyen las librerías para el display en la pantalla LCD TFT
#include <stdint.h>
#include <stdbool.h>
#include <TM4C123GH6PM.h>
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/debug.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/rom_map.h"
#include "driverlib/rom.h"
#include "driverlib/sysctl.h"
#include "driverlib/timer.h"
#include "bitmaps.h"  // Inclusión de archivos de mapa de bits
#include "font.h" // Inclusión de archivos de fuentes
#include "lcd_registers.h"  // Inclusión de registros de LCD

// Definición de pines para el control de la pantalla

#define LCD_RST PD_0
#define LCD_CS PD_1
#define LCD_RS PD_2
#define LCD_WR PD_3
#define LCD_RD PE_1
int DPINS[] = {PB_0, PB_1, PB_2, PB_3, PB_4, PB_5, PB_6, PB_7};  


//***************************************************************************************************************************************
// Functions Prototypes
//***************************************************************************************************************************************
void LCD_Init(void);
void LCD_CMD(uint8_t cmd);
void LCD_DATA(uint8_t data);
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2);
void LCD_Clear(unsigned int c);
void H_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c);
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c);
void Rect(unsigned int x, unsigned int y, unsigned int w, unsigned int h, unsigned int c);
void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h, unsigned int c);
void LCD_Print(String text, int x, int y, int fontSize, int color, int background);
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width, unsigned int height, unsigned char bitmap[]);
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],int columns, int index, char flip, char offset);
//Definición de imagenes almocenado en la memoria 
extern uint8_t fondo[];
extern uint8_t imgbalanza [];


//Variables globales 




//Union del Programa 2
// LLaman a las librerías para el uso de SD y SPI 
#include <SD.h>
#include <SPI.h>
#include <stdlib.h>

//Se crea un archivo tipo File para abrir el archivo del SD
File myFile;

//Se definen los valores de las variables para almacenar los valores del sensor, el cual es el peso de la balanza. Se definen como String los valores que se obtiene del ESP32 por medio de la comunicación UART 
String LECTURASENSOR; 

//Variables Gblobales 
//Se definen las variables de los bótones 
#define BotonB1 PUSH1
#define BotonB2 PUSH2

//Se define el pin del Buzzer para emitir el sonido de la alarma 
#define BUZZER_PIN 39



//Se definen las variables para verificar el estado del bóton y verificar si se incrementa o decrementa el bóton, esto para poder hacer uso de las interrupciones 
volatile bool medir = true; 
volatile bool guardar = true;

//Variable utilizada para recibir la comunicación desde el ESP32 
char Receptor;
// Variables para almacenar las partes
char rollPart[30]; // Ajusta el tamaño según tus necesidades
char pitchPart[30]; // Ajusta el tamaño según tus necesidades


//Variables utilizadas para mostrar texto en la pantalla 
//TEXTO
String text1 = "    Giroscopio      ";
String text2 = "Guardando...";
String text3 = " Guardado";
String text4 = "Midiendo...";
String text5 ;


//***************************************************************************************************************************************
// Inicialización
//***************************************************************************************************************************************
void setup() {
//
  SysCtlClockSet(SYSCTL_SYSDIV_2_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);
  Serial.begin(115200);
  Serial2.begin(115200); 
  GPIOPadConfigSet(GPIO_PORTB_BASE, 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7, GPIO_STRENGTH_8MA, GPIO_PIN_TYPE_STD_WPU);
  Serial.println("Inicio");
  LCD_Init();
  LCD_Clear(0x00);
  FillRect(0, 0, 320, 239,0xFFFF);
  FillRect(0, 0, 320, 120,0xE145);
  LCD_Print(text1, 0, 20, 2, 0x00, 0xFFFF);
//LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],int columns, int index, char flip, char offset);
 
//Definición del Suelo para la pantalla, se utiliza el bitmap que se encuentra en el archivo de BITMAPS 
 for(int x = 0; x <319; x++){
    LCD_Bitmap(x, 207, 32,32, tile);
    x += 31;
 }

 
//Setup programa 2 
//Configuración del Pin de salida 
pinMode(BUZZER_PIN, OUTPUT);

//Mensaje de confirmación de conexión realizada
Serial.println("Conexión con Computadora  Completa");
Serial.println("Conexión con ESP332 Completa ");

//Configuración de los Bótones como interrupciones 
pinMode(BotonB1, INPUT_PULLUP);
attachInterrupt(BotonB1, ISR_1, FALLING);
pinMode(BotonB2, INPUT_PULLUP);
attachInterrupt(BotonB2, ISR_2, FALLING);


//Configuración de los parametros de la SD
while(!Serial){
  ;
}
SPI.setModule(0);
Serial.print("Initializing SD card...");
pinMode(12, OUTPUT);
if (!SD.begin(12)) {
    Serial.println("Card initialization failed!");
    return;
  }
Serial.println("initialization done.");
}




//***************************************************************************************************************************************
// Loop Infinito
//***************************************************************************************************************************************
void loop() {


//Código para traer la memoria del sensor 
if (!medir) {
   Serial2.write('+');
   medir = true; 
   Serial.println("Se envia el mensaje ");
   LCD_Midiendo();
   delay(10);
   
  }


//Código para guardar en la memoria SD la toma del sensor 
if (!guardar) {
      myFile = SD.open("test.txt", FILE_WRITE);
      if (myFile) {
      Serial.print("Writing in text...");
      Serial2.write('-');
      delay(10);
      Serial.print("Mesaje 2 enviado");
      myFile.println("LOS VALORES DEL GIROSCOPIO SON LOS SIGUIENTES ");
      myFile.println(LECTURASENSOR);;   
      myFile.close();
      Serial.println("Done");
      }else {
        Serial.println("error opening datosdelgiroscopio.txt!");
      }
     guardar = true;
     LCD_Guardando(); 
     delay(10);  
     LCD_Presentarpeso();
     String textoguardado = "     Guardado ";
     LCD_Print(textoguardado, 0, 44, 2, 0x00,0xFFFF);
     LCD_Print(rollPart, 0, 60, 2, 0x00,0xFFFF);
     LCD_Print(pitchPart, 0, 76, 2, 0x00,0xFFFF);
     LCD_Bitmap(100,125,97,64, imgbalanza);
     
   }


//Recepción del Valor del Sensor

if(Serial2.available()>0){ 
  LECTURASENSOR = Serial2.readString();
  delay(200); 
  limpiarBuffer();
  Serial.println(LECTURASENSOR);
  // Convertir la String a un arreglo de caracteres (char[])
  char cadenaOriginal[LECTURASENSOR.length() + 1];  // +1 para el carácter nulo
  LECTURASENSOR.toCharArray(cadenaOriginal, sizeof(cadenaOriginal));

  // Dividir la cadena en partes usando '\n' como delimitador 
  char *token = strtok(cadenaOriginal, "\n");

  // Almacenar la primera parte
  if (token != NULL) {
    strncpy(rollPart, token, sizeof(rollPart) - 1);
    rollPart[sizeof(rollPart) - 1] = '\0';  // Agregar el carácter nulo al final
    trim(rollPart); 
}

   // Obtener la siguiente parte
   token = strtok(NULL, "\n");

    // Almacenar la segunda parte
    if (token != NULL) {
      strncpy(pitchPart, token, sizeof(pitchPart) - 1);
      pitchPart[sizeof(pitchPart) - 1] = '\0';  // Agregar el carácter nulo al final
      trim(pitchPart);
    Serial.println(rollPart);
    Serial.println(pitchPart);
   LCD_Presentarpeso();
   LCD_Print(rollPart, 0, 60, 2, 0x00,0xFFFF);
   LCD_Print(pitchPart, 0, 76, 2, 0x00,0xFFFF);
   LCD_Bitmap(100,125,97,64, imgbalanza);
}  
}





delay(10);

}
//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
  pinMode(LCD_RST, OUTPUT);
  pinMode(LCD_CS, OUTPUT);
  pinMode(LCD_RS, OUTPUT);
  pinMode(LCD_WR, OUTPUT);
  pinMode(LCD_RD, OUTPUT);
  for (uint8_t i = 0; i < 8; i++){
    pinMode(DPINS[i], OUTPUT);
  }
  //****************************************
  // Secuencia de Inicialización
  //****************************************
  digitalWrite(LCD_CS, HIGH);
  digitalWrite(LCD_RS, HIGH);
  digitalWrite(LCD_WR, HIGH);
  digitalWrite(LCD_RD, HIGH);
  digitalWrite(LCD_RST, HIGH);
  delay(5);
  digitalWrite(LCD_RST, LOW);
  delay(20);
  digitalWrite(LCD_RST, HIGH);
  delay(150);
  digitalWrite(LCD_CS, LOW);
  //****************************************
  LCD_CMD(0xE9);  // SETPANELRELATED
  LCD_DATA(0x20);
  //****************************************
  LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
  delay(100);
  //****************************************
  LCD_CMD(0xD1);    // (SETVCOM)
  LCD_DATA(0x00);
  LCD_DATA(0x71);
  LCD_DATA(0x19);
  //****************************************
  LCD_CMD(0xD0);   // (SETPOWER) 
  LCD_DATA(0x07);
  LCD_DATA(0x01);
  LCD_DATA(0x08);
  //****************************************
  LCD_CMD(0x36);  // (MEMORYACCESS)
  LCD_DATA(0x40|0x80|0x20|0x08); // LCD_DATA(0x19);
  //****************************************
  LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
  LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
  //****************************************
  LCD_CMD(0xC1);    // (POWERCONTROL2)
  LCD_DATA(0x10);
  LCD_DATA(0x10);
  LCD_DATA(0x02);
  LCD_DATA(0x02);
  //****************************************
  LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
  LCD_DATA(0x00);
  LCD_DATA(0x35);
  LCD_DATA(0x00);
  LCD_DATA(0x00);
  LCD_DATA(0x01);
  LCD_DATA(0x02);
  //****************************************
  LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
  LCD_DATA(0x04); // 72Hz
  //****************************************
  LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
  LCD_DATA(0x01);
  LCD_DATA(0x44);
  //****************************************
  LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
  LCD_DATA(0x04);
  LCD_DATA(0x67);
  LCD_DATA(0x35);
  LCD_DATA(0x04);
  LCD_DATA(0x08);
  LCD_DATA(0x06);
  LCD_DATA(0x24);
  LCD_DATA(0x01);
  LCD_DATA(0x37);
  LCD_DATA(0x40);
  LCD_DATA(0x03);
  LCD_DATA(0x10);
  LCD_DATA(0x08);
  LCD_DATA(0x80);
  LCD_DATA(0x00);
  //****************************************
  LCD_CMD(0x2A); // Set_column_address 320px (CASET)
  LCD_DATA(0x00);
  LCD_DATA(0x00);
  LCD_DATA(0x01);
  LCD_DATA(0x3F);
  //****************************************
  LCD_CMD(0x2B); // Set_page_address 480px (PASET)
  LCD_DATA(0x00);
  LCD_DATA(0x00);
  LCD_DATA(0x01);
  LCD_DATA(0xE0);
//  LCD_DATA(0x8F);
  LCD_CMD(0x29); //display on 
  LCD_CMD(0x2C); //display on

  LCD_CMD(ILI9341_INVOFF); //Invert Off
  delay(120);
  LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
  delay(120);
  LCD_CMD(ILI9341_DISPON);    //Display on
  digitalWrite(LCD_CS, HIGH);
}
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
  digitalWrite(LCD_RS, LOW);
  digitalWrite(LCD_WR, LOW);
  GPIO_PORTB_DATA_R = cmd;
  digitalWrite(LCD_WR, HIGH);
}
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
  digitalWrite(LCD_RS, HIGH);
  digitalWrite(LCD_WR, LOW);
  GPIO_PORTB_DATA_R = data;
  digitalWrite(LCD_WR, HIGH);
}
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
  LCD_CMD(0x2a); // Set_column_address 4 parameters
  LCD_DATA(x1 >> 8);
  LCD_DATA(x1);   
  LCD_DATA(x2 >> 8);
  LCD_DATA(x2);   
  LCD_CMD(0x2b); // Set_page_address 4 parameters
  LCD_DATA(y1 >> 8);
  LCD_DATA(y1);   
  LCD_DATA(y2 >> 8);
  LCD_DATA(y2);   
  LCD_CMD(0x2c); // Write_memory_start
}
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c){  
  unsigned int x, y;
  LCD_CMD(0x02c); // write_memory_start
  digitalWrite(LCD_RS, HIGH);
  digitalWrite(LCD_CS, LOW);   
  SetWindows(0, 0, 319, 239); // 479, 319);
  for (x = 0; x < 320; x++)
    for (y = 0; y < 240; y++) {
      LCD_DATA(c >> 8); 
      LCD_DATA(c); 
    }
  digitalWrite(LCD_CS, HIGH);
} 
//***************************************************************************************************************************************
// Función para dibujar una línea horizontal - parámetros ( coordenada x, cordenada y, longitud, color)
//*************************************************************************************************************************************** 
void H_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {  
  unsigned int i, j;
  LCD_CMD(0x02c); //write_memory_start
  digitalWrite(LCD_RS, HIGH);
  digitalWrite(LCD_CS, LOW);
  l = l + x;
  SetWindows(x, y, l, y);
  j = l;// * 2;
  for (i = 0; i < l; i++) {
      LCD_DATA(c >> 8); 
      LCD_DATA(c); 
  }
  digitalWrite(LCD_CS, HIGH);
}
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//*************************************************************************************************************************************** 
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {  
  unsigned int i,j;
  LCD_CMD(0x02c); //write_memory_start
  digitalWrite(LCD_RS, HIGH);
  digitalWrite(LCD_CS, LOW);
  l = l + y;
  SetWindows(x, y, x, l);
  j = l; //* 2;
  for (i = 1; i <= j; i++) {
    LCD_DATA(c >> 8); 
    LCD_DATA(c);
  }
  digitalWrite(LCD_CS, HIGH);  
}
//***************************************************************************************************************************************
// Función para dibujar un rectángulo - parámetros ( coordenada x, cordenada y, ancho, alto, color)
//***************************************************************************************************************************************
void Rect(unsigned int x, unsigned int y, unsigned int w, unsigned int h, unsigned int c) {
  H_line(x  , y  , w, c);
  H_line(x  , y+h, w, c);
  V_line(x  , y  , h, c);
  V_line(x+w, y  , h, c);
}
//***************************************************************************************************************************************
// Función para dibujar un rectángulo relleno - parámetros ( coordenada x, cordenada y, ancho, alto, color)
//***************************************************************************************************************************************
/*void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h, unsigned int c) {
  unsigned int i;
  for (i = 0; i < h; i++) {
    H_line(x  , y  , w, c);
    H_line(x  , y+i, w, c);
  }
}
*/

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h, unsigned int c) {
  LCD_CMD(0x02c); // write_memory_start
  digitalWrite(LCD_RS, HIGH);
  digitalWrite(LCD_CS, LOW); 
  
  unsigned int x2, y2;
  x2 = x+w;
  y2 = y+h;
  SetWindows(x, y, x2-1, y2-1);
  unsigned int k = w*h*2-1;
  unsigned int i, j;
  for (int i = 0; i < w; i++) {
    for (int j = 0; j < h; j++) {
      LCD_DATA(c >> 8);
      LCD_DATA(c);
      
      //LCD_DATA(bitmap[k]);    
      k = k - 2;
     } 
  }
  digitalWrite(LCD_CS, HIGH);
}
//***************************************************************************************************************************************
// Función para dibujar texto - parámetros ( texto, coordenada x, cordenada y, color, background) 
//***************************************************************************************************************************************
void LCD_Print(String text, int x, int y, int fontSize, int color, int background) {
  int fontXSize ;
  int fontYSize ;
  
  if(fontSize == 1){
    fontXSize = fontXSizeSmal ;
    fontYSize = fontYSizeSmal ;
  }
  if(fontSize == 2){
    fontXSize = fontXSizeBig ;
    fontYSize = fontYSizeBig ;
  }
  
  char charInput ;
  int cLength = text.length();
  Serial.println(cLength,DEC);
  int charDec ;
  int c ;
  int charHex ;
  char char_array[cLength+1];
  text.toCharArray(char_array, cLength+1) ;
  for (int i = 0; i < cLength ; i++) {
    charInput = char_array[i];
    Serial.println(char_array[i]);
    charDec = int(charInput);
    digitalWrite(LCD_CS, LOW);
    SetWindows(x + (i * fontXSize), y, x + (i * fontXSize) + fontXSize - 1, y + fontYSize );
    long charHex1 ;
    for ( int n = 0 ; n < fontYSize ; n++ ) {
      if (fontSize == 1){
        charHex1 = pgm_read_word_near(smallFont + ((charDec - 32) * fontYSize) + n);
      }
      if (fontSize == 2){
        charHex1 = pgm_read_word_near(bigFont + ((charDec - 32) * fontYSize) + n);
      }
      for (int t = 1; t < fontXSize + 1 ; t++) {
        if (( charHex1 & (1 << (fontXSize - t))) > 0 ) {
          c = color ;
        } else {
          c = background ;
        }
        LCD_DATA(c >> 8);
        LCD_DATA(c);
      }
    }
    digitalWrite(LCD_CS, HIGH);
  }
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width, unsigned int height, unsigned char bitmap[]){  
  LCD_CMD(0x02c); // write_memory_start
  digitalWrite(LCD_RS, HIGH);
  digitalWrite(LCD_CS, LOW); 
  
  unsigned int x2, y2;
  x2 = x+width;
  y2 = y+height;
  SetWindows(x, y, x2-1, y2-1);
  unsigned int k = 0;
  unsigned int i, j;

  for (int i = 0; i < width; i++) {
    for (int j = 0; j < height; j++) {
      LCD_DATA(bitmap[k]);
      LCD_DATA(bitmap[k+1]);
      //LCD_DATA(bitmap[k]);    
      k = k + 2;
     } 
  }
  digitalWrite(LCD_CS, HIGH);
}
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],int columns, int index, char flip, char offset){
  LCD_CMD(0x02c); // write_memory_start
  digitalWrite(LCD_RS, HIGH);
  digitalWrite(LCD_CS, LOW); 

  unsigned int x2, y2;
  x2 =   x+width;
  y2=    y+height;
  SetWindows(x, y, x2-1, y2-1);
  int k = 0;
  int ancho = ((width*columns));
  if(flip){
  for (int j = 0; j < height; j++){
      k = (j*(ancho) + index*width -1 - offset)*2;
      k = k+width*2;
     for (int i = 0; i < width; i++){
      LCD_DATA(bitmap[k]);
      LCD_DATA(bitmap[k+1]);
      k = k - 2;
     } 
  }
  }else{
     for (int j = 0; j < height; j++){
      k = (j*(ancho) + index*width + 1 + offset)*2;
     for (int i = 0; i < width; i++){
      LCD_DATA(bitmap[k]);
      LCD_DATA(bitmap[k+1]);
      k = k + 2;
     } 
  }
    
    
    }
  digitalWrite(LCD_CS, HIGH);
}



//***************************************************************************************************************************************
// Función personalizadas 
//***************************************************************************************************************************************
//Funcción para mostrar en Pantalla TFT LCD que se está guardando el peso en la SD y animación 
void LCD_Guardando(){

 LCD_Clear(0x00);
 FillRect(0, 0, 320, 239,0xFFFF);
 LCD_Print(text1, 0, 20, 2, 0x00, 0xFFFF);
//Definición del SUelo para la pantalla 
 for(int x = 0; x <319; x++){
    LCD_Bitmap(x, 207, 32,32, tile);
    x += 31;
 }
 
 LCD_Print(text2, 80, 120, 2, 0x00, 0xFFFF);
 for(int x = 0; x <320-33; x++){
    delay(5);
    int anim = (x/11)%8;
    LCD_Sprite(x, 175, 16, 33, bunny,4, anim,0, 0);
    V_line( x - 1, 175, 33, 0xFFFF);
  }
  
  for(int x = 320-33; x >0; x--){
    delay(5);
    int anim = (x/11)%8;  
    LCD_Sprite(x, 175, 16, 33, bunny,4, anim,1, 0);
    V_line( x + 16, 175, 33, 0xFFFF);
  
  }
 LCD_Print(text2, 80, 120, 2, 0xFFFF, 0xFFFF); 
 LCD_Print(text3, 80, 120, 2, 0x00, 0xFFFF);
  
}

//Funcción para mostrar en Pantalla TFT LCD que se está midiendo el peso y animación 
void LCD_Midiendo(){
 LCD_Clear(0x00);
 FillRect(0, 0, 320, 239,0xFFFF);
 LCD_Print(text1, 0, 20, 2, 0x00, 0xFFFF);
//Definición del SUelo para la pantalla 
 for(int x = 0; x <319; x++){
    LCD_Bitmap(x, 207, 32,32, tile);
    x += 31;
 }
 
 LCD_Print(text4, 80, 120, 2, 0x00, 0xFFFF);

   for(int x = 0; x <320; x++){
    delay(5);
    int anim2 = (x/11)%8;
    LCD_Sprite(140, 155, 32, 52, PATO,5, anim2,1, 0); 
  }
  
}

//Funcion para mostrar fondo al momento de mostrar el peso luego de hacer medición o guardar en la memoria 
void LCD_Presentarpeso(){
 LCD_Clear(0x00);
 FillRect(0, 0, 320, 239,0xFFFF);
 FillRect(0, 0, 160, 200,0xFAC0);
 LCD_Print(text1, 0, 20, 2, 0x00,0xFFFF);
//Definición del SUelo para la pantalla 
 for(int x = 0; x <319; x++){
    LCD_Bitmap(x, 207, 32,32, tile);
    x += 31;
 }
  
}


//Funciones programa 2 


//Vector de interrupción 
//*****************************************************************************

//Estas interrupciones sirven para generar el cambio en los estados de medir peso y guardar valor en memoria SD B1 (Medir peso), B2 (Guardar Peso en memoria SD)
void ISR_1() {
  medir = false;
}

void ISR_2() {
  guardar = false;
}

//Función para limpiar el Buffer en la comunicación Serial con el ESP32 y evitar errores en la comunicación o la recepción de un valor duplicado
void limpiarBuffer() {
  while (Serial2.available() > 0) {
    char c = Serial2.read(); // Lee y descarta los bytes restantes en el búfer
  }
}





void trim(char *str) {
  // Eliminar espacios al principio
  while (*str == ' ' || *str == '\t' || *str == '\n' || *str == '\r') {
    str++;
  }

  // Eliminar espacios al final
  char *end = str + strlen(str) - 1;
  while (end > str && (*end == ' ' || *end == '\t' || *end == '\n' || *end == '\r')) {
    end--;
  }

  // Agregar el carácter nulo al final de la cadena
  *(end + 1) = '\0';
}
